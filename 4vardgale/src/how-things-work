This file describes the flow of variables in the program:

1. init.c
inp.dat is read by ReadInput() function in init.c. This reads primitive
variables V and converts them to the conserved quantities U to be used by
taylor.c

It constructs U[] and U[][], to be used by taylor.c

2. taylor.c
Calls Jacobian() function from flux.c and provides it the U variables obtained
from init.c

3. flux.c
Constructs Jacobian() using the U variables (conserved quantities) and returns
the jacobian A to taylor.c

4. taylor.c
Computes the predicted solution u_p to be used in div.c

5. div.c
Defines two 3D arrays u_r and u_l to store the values of predicted solution for
every variable, at each time point, for each cell on the left and right face of
each cell.

Initializes u_p, calls get_predictor() and stores the predicted solution in u_p.

The Flux() function uses u_p to generate u_r and u_l, and calls EulerFlux() to
generate fluxes in the array flg.

Decides which numerical flux function to use (LFFlux(), RoeFlux()...etc).
This Flux() is called by main.c

6. main.c
It gives a call to MeshVel(), TimeStep(), Flux(), Update(), and Result()

7. update.c
Computes U(n+1)
Assigns it to U(n)
================================================================================
The Flow
================================================================================

1. U(n) is obtained from V(n) in init.c

2. This U[n] is supplied to Jacobian() (defined in flux.c, yields A) in taylor.c

3. taylor.c obtains A and computes the predicted solution Up. using U[n] and A

4. This Up is used in div.c to generate Ul and Ur and provide them to flux (LFF)

5. div.c also generates the Re[][] which is finally used by update.c

6. update.c computes U[n+1] and assigns them to U[n]

================================================================================
Changes for Relativistc Euler
================================================================================

1. Obtain U[n] from init.c

2. Convert to V[n]

3. Supply to Jacobian() in taylor.c

4. Get Vp - the predicted solution in terms of primitive variables V

5. Construct Vl and Vr

6. Supply them to LFFlux()

7. Also reconstruct LFF with new eigenvalues

8. Reconstruct Re[][]

9. Supply to update.c

================================================================================

A half built code for the function EigMat() for Relativistic EulerFlux

REAL V[4];
  REAL R1[4], R2[4], R3[4], R4[4]; // stores right primitive eigenvectors
  REAL L1[4], L2[4], L3[4], L4[4]; // stores left primitive eigenvectors
  REAL UV[4][4]; // stores the dU/dV matrix
  int i;
  con2prim(U, V);

  REAL rho = V[0];
  REAL u1 = V[1];
  REAL u2 = V[2];
  REAL p = V[3];
  REAL alpha = GAMMA / (GAMMA - 1);
  REAL h = 1 + p * alpha / rho;
  REAL c = sqrt(GAMMA * p / (rho * h));
  REAL u1sq = u1 * u1;
  REAL u2sq = u2 * u2;
  REAL usq = u1sq + u2sq;
  REAL BETA = 1 / sqrt(1 - usq);
  REAL BETAsq = BETA * BETA;
  //we only need 2 of the eigenvalues, hence we only define those two here

  //lambda_plus, eigenvalue with plus sign
  REAL lambda_p = fabs((u1 * (1 - c * c) +
                 c * sqrt((1 - usq) * (1 - u1sq - u2sq * c * c))) /
                 (1 - usq * c * c));
  //lambda_minus, eigenvalue with minus sign
  REAL lambda_m = fabs((u1 * (1 - c * c) -
                 c * sqrt((1 - usq) * (1 - u1sq - u2sq * c * c))) /
                 (1 - usq * c * c));
  // TODO (pulkit#1#): Check the formula for small k
  //REAL k = GAMMA - 1;
  REAL K = h;          //k / (k - c * c);
  //Aplus, A evaluated using the eigenvalue evaluated using + sign
  REAL Ap = (1 - u1 * u1) / (1 - u1 * lambda_p);
  //Aminus, A evaluated using the eigenvalue evaluated using - sign
  REAL Am = (1 - u1 * u1) / (1 - u1 * lambda_m);

  /*Right Eigenvectors of primitive variables*/
  R1[0] = K / (h * BETA);
  R1[1] = u1;
  R1[2] = u2;
  R1[3] = 1 - K / (h * BETA);

  R2[0] = BETA * u2;
  R2[1] = 2 * h * BETAsq * u1 * u2;
  R2[2] = h * (1 + 2 * BETAsq * u2 * u2);
  R2[3] = 2 * h * BETAsq * u2 - BETA * u2;

  R3[0] = 1.0;
  R3[1] = h * BETA * Ap * lambda_p;
  R3[2] = h * BETA * u2;
  R3[3] = h * BETA * Ap - 1;

  R4[0] = 1.0;
  R4[1] = h * BETA * Am * lambda_m;
  R4[2] = h * BETA * u2;
  R4[3] = h * BETA * Am - 1;

  /* The dU/dV matrix */
  UV[0][0] = BETA;
  UV[1][0] = u1 * BETAsq;
  UV[2][0] = u2 * BETAsq;
  UV[3][0] = BETAsq;

  UV[0][1] = rho * u1 * BETAsq * BETA;
  UV[1][1] = rho * h * (1 + u1 * u1 - u2 * u2) * BETAsq * BETAsq;
  UV[2][1] = 2 * rho * h * u1 * u2 * BETAsq * BETAsq;
  UV[3][1] = 2 * rho * h * u1 * BETAsq * BETAsq;

  UV[0][2] = rho * u2 * BETAsq * BETA;
  UV[1][2] = 2 * rho * h * u1 * u2 * BETAsq * BETAsq;;
  UV[2][2] = rho * h * (1 - u1 * u1 + u2 * u2) * BETAsq * BETAsq;
  UV[3][2] = 2 * rho * h * u2 * BETAsq * BETAsq;

  UV[0][3] = 0;
  UV[1][3] = alpha * u1 * BETAsq;
  UV[2][3] = alpha * u2 * BETAsq;
  UV[3][3] = -1 + alpha * BETAsq;

  Multi(UV, R1);
  Multi(UV, R2);
  Multi(UV, R3);
  Multi(UV, R4);

  /* Right Eigenvector Matrix */
  for(i = 0; i < NVAR; i++)
    R[i][0] = R1[i];

  for(i = 0; i < NVAR; i++)
    R[i][1] = R2[i];

  for(i = 0; i < NVAR; i++)
    R[i][2] = R3[i];

  for(i = 0; i < NVAR; i++)
    R[i][3] = R4[i];

 /* Left Eigenvectors */
  L1[0] =
  L1[1] =
  L1[2] =
  L1[3] =

  L2[0] =
  L2[1] =
  L2[2] =
  L2[3] =

  L3[0] =
  L3[1] =
  L3[2] =
  L3[3] =

  L4[0] =
  L4[1] =
  L4[2] =
  L4[3] =;


















